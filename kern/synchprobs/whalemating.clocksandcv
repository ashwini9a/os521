/*
 * Copyright (c) 2001, 2002, 2009
 *	The President and Fellows of Harvard College.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Driver code is in kern/tests/synchprobs.c We will
 * replace that file. This file is yours to modify as you see fit.
 *
 * You should implement your solution to the whalemating problem below.
 */

#include <types.h>
#include <lib.h>
#include <thread.h>
#include <test.h>
#include <synch.h>

/*
 * Called by the driver during initialization.
 */
static struct lock *malelock;
static int malecount;
static int femalecount;
static int matchmakercount;
static int malestart;
static int femalestart;
static int matchmakerstart;
static struct cv *endcv;

void whalemating_init() {
	malelock = lock_create("malelock");
	if (malelock == NULL) {
		panic("malelock create failed in matingwhale.c \n");
	}
	
	malecount = 0;
	femalecount = 0;
	matchmakercount = 0;
	malestart = 0;
	femalestart = 0;
	matchmakerstart = 0;
	endcv = cv_create("endcv");
	if (endcv == NULL) {
		panic("end cv not created in whalemating.c\n");
	}
	return;
}

/*
 * Called by the driver during teardown.
 */

void
whalemating_cleanup() {
	lock_destroy(malelock);
	cv_destroy(endcv);
	return;
}

void
male(uint32_t index)
{
	male_start(index);
	lock_acquire(malelock);
	malestart = malestart +2;
	cv_broadcast(endcv, malelock);
	while (femalestart == 0 || matchmakerstart == 0) 
	{
		cv_wait(endcv , malelock);
	}
	male_end(index);
	femalestart--;
	matchmakerstart--;
	lock_release(malelock);	
	return;
}

void
female(uint32_t index)
{
	female_start(index);
	lock_acquire(malelock);
	femalestart = femalestart + 2;
	cv_broadcast(endcv, malelock);
	while (malestart == 0 || matchmakerstart == 0) 
	{
		cv_wait(endcv , malelock);
	}
	female_end(index);
	malestart--;
	matchmakerstart--;
	lock_release(malelock);
	return;
}

void
matchmaker(uint32_t index)
{

	matchmaker_start(index);
	lock_acquire(malelock);
	matchmakerstart = matchmakerstart + 2;
	cv_broadcast(endcv, malelock);
	while (femalestart == 0 || malestart == 0) 
	{
		cv_wait(endcv , malelock);
	}
	matchmaker_end(index);
	malestart--;
	femalestart--;
	lock_release(malelock);
	
	return;
}
